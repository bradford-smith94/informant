#!/usr/bin/env python3
"""
informant - an Arch Linux News reader designed to also be used as a pacman hook

Usage:
    informant [options] check
    informant [options] list [--reverse --unread]
    informant [options] read (<item> | --all)

Commands:
    check - Check for unread news items, will exit with a positive return code
            with the number of unread items. If there is only one unread item it
            will also print in like 'read' would and mark it as read, else it
            will print the number of unread titles.

    list -  Print the most recent news items, regardless of read status. If
            '--reverse' is provided items are printed oldest to newest. If
            '--unread' is provided only the unread items are returned.

    read  - Read the specified news item, <item> can be either an index or a
            full title. This will also save the item as 'read' so that future
            calls to 'check' will no longer display it.

Options:
    -d, --debug                 Print the command line arguments and don't make
                                changes to the save file
    -r, --raw                   When printing items do not replace any markup
    -f <file>, --file=<file>    Use <file> as the save location for read items
    -h, --help                  Show this help and exit
    -V,--version                Show version and exit

"""

import pickle
import sys

import docopt
import feedparser
from dateutil import parser as date_parser

ARCH_NEWS = 'https://archlinux.org/feeds/news'
FILE_DEFAULT = '/var/cache/informant.dat'
RED = '\033[0;31m'
CLEAR = '\033[0m'

CHECK_CMD = 'check'
LIST_CMD = 'list'
READ_CMD = 'read'
READALL_OPT = '--all'

# global options
DEBUG_OPT = '--debug'
FILE_OPT = '--file'
RAW_OPT = '--raw'

# 'list' options and args
ITEM_ARG = '<item>'
REV_OPT = '--reverse'
UNREAD_OPT = '--unread'

def err_print(*args, **kwargs):
    """ Same as builtin print but output to stderr. """
    print(*args, file=sys.stderr, **kwargs)

def get_save_name():
    """ Return the name of the file to save read information to. """
    if ARGV.get(FILE_OPT):
        return ARGV.get(FILE_OPT)
    return FILE_DEFAULT

def get_readlist(filename):
    """ Return a List. This list should be a list of timestamps and titles of
    the feed items that have already been read. If filename does not exist, is
    empty or otherwise inaccessible then this returns an empty list. """
    if ARGV.get(DEBUG_OPT):
        err_print('Getting readlist from "{}"'.format(filename))
    try:
        with open(filename, 'rb') as pickle_file:
            try:
                readlist = pickle.load(pickle_file)
                pickle_file.close()
            except EOFError:
                readlist = []
    except (FileNotFoundError, PermissionError):
        readlist = []
    return readlist

def has_been_read(entry):
    """ Check if the given entry has been read and return True or False. """
    if ARGV.get(DEBUG_OPT):
        err_print(READLIST)
    title = entry.title
    date = date_parser.parse(entry.updated)
    if str(date.timestamp()) + '|' + title in READLIST:
        return True
    return False

def mark_as_read(entry):
    """ Save the given entry to mark it as read. """
    if ARGV.get(DEBUG_OPT) or has_been_read(entry):
        return
    title = entry.title
    date = date_parser.parse(entry.updated)
    filename = get_save_name()
    READLIST.append(str(date.timestamp()) + '|' + title)
    try:
        # then open as write to save updated list
        with open(filename, 'wb') as pickle_file:
            pickle.dump(READLIST, pickle_file)
            pickle_file.close()
    except PermissionError:
        err_print(RED + 'ERROR: ' + CLEAR + 'Unable to save read information, \
please re-run with correct permissions to access "{}".'.format(filename))
        exit(255)

def pretty_print_item(item):
    """ Print out the given feed item, replacing some markup to make it look
    nicer. If the '--raw' option has been provided then the markup will not be
    replaced. """
    title = item.title
    body = item.summary
    if not ARGV.get(RAW_OPT):
        body = body.replace('<p>', '\t')
        body = body.replace('</p>', '\n')
        body = body.replace('<pre><code>', '```\n')
        body = body.replace('</code></pre>', '\n```\n')
        body = body.replace('<code>', '`')
        body = body.replace('</code>', '`')
    print(title + '\n\n' + body)

def check_cmd(feed):
    """ Run the check command. Check if there are any news items that are
    unread. If there is only one unread item, print it out and mark it as read.
    Also, exit the program with return code matching the unread count. """
    unread = 0
    unread_items = []
    for entry in feed.entries:
        if not has_been_read(entry):
            unread += 1
            unread_items.append(entry)
    if unread == 1:
        pretty_print_item(unread_items[0])
        mark_as_read(unread_items[0])
    elif unread > 1:
        print('There are {:d} unread news items! Use informant to read \
them.'.format(unread))
    exit(unread)

def list_cmd(feed):
    """ Run the list command. Print out a list of recent news item titles. """
    if ARGV.get(REV_OPT):
        feed_list = reversed(feed.entries)
    else:
        feed_list = feed.entries
    index = 0
    for entry in feed_list:
        if not ARGV.get(UNREAD_OPT) \
        or (ARGV.get(UNREAD_OPT) and not has_been_read(entry)):
            print(index, end=': ')
            print(entry.title)
            index += 1

def read_cmd(feed):
    """ Run the read command. Print news items and mark them as read. """
    if ARGV.get(READALL_OPT):
        for entry in feed.entries:
            mark_as_read(entry)
    else:
        item = ARGV[ITEM_ARG]
        try:
            index = int(item)
            entry = feed.entries[index]
        except ValueError:
            for entry in feed.entries:
                if entry.title == item:
                    break
            #NOTE: this will read the oldest unread item if no matches are found
        pretty_print_item(entry)
        mark_as_read(entry)

def run():
    """ The main function.
    Check given arguments get feed and run given command. """
    if ARGV.get(DEBUG_OPT):
        err_print(ARGV)
    feed = feedparser.parse(ARCH_NEWS)
    if ARGV.get(CHECK_CMD):
        check_cmd(feed)
    elif ARGV.get(LIST_CMD):
        list_cmd(feed)
    elif ARGV.get(READ_CMD):
        read_cmd(feed)

if __name__ == '__main__':
    ARGV = docopt.docopt(__doc__, version='informant v0.0.8')
    READLIST = get_readlist(get_save_name())
    run()
    exit()
