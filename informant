#!/usr/bin/env python3
"""
informant - an Arch Linux News reader designed to also be used as a pacman hook

Usage:
    informant [options] check
    informant [options] list [--reverse --unread]
    informant [options] read [<item> | --all]

Commands:
    check - Check for unread news items, will exit with a positive return code
            with the number of unread items. If there is only one unread item it
            will also print in like 'read' would and mark it as read, else it
            will print the number of unread titles.

    list -  Print the most recent news items, regardless of read status. If
            '--reverse' is provided items are printed oldest to newest. If
            '--unread' is provided only the unread items are returned.

    read  - Read the specified news item, <item> can be either an index or a
            full title. This will also save the item as 'read' so that future
            calls to 'check' will no longer display it. If no <item> is given,
            will begin looping through all unread items, printing each one and
            marking them as read with a prompt to continue. Passing the --all
            flag will mark all items as read without printing.

Options:
    -d, --debug                 Print the command line arguments and don't make
                                changes to the save file
    -r, --raw                   When printing items do not replace any markup
    -f <file>, --file=<file>    Use <file> as the save location for read items
    -h, --help                  Show this help and exit
    -V,--version                Show version and exit
    --no-cache                  Do not use cache

"""

# builtins
import os
import pickle
import shutil
import subprocess
import sys
import textwrap
import time
import os, grp, pwd

# external
import docopt
import feedparser
import html2text
from dateutil import parser as date_parser

ARCH_NEWS = 'https://archlinux.org/feeds/news'

# colors
RED = '\033[0;31m'
YELLOW = '\033[1;33m'
CLEAR = '\033[0m'
BOLD = '\033[1m'

# commands
CHECK_CMD = 'check'
LIST_CMD = 'list'
READ_CMD = 'read'

# global options
DEBUG_OPT = '--debug'
FILE_OPT = '--file'
RAW_OPT = '--raw'
NOCACHE_OPT = '--no-cache'

# 'list' options
REV_OPT = '--reverse'
UNREAD_OPT = '--unread'

# 'read' options and args
ITEM_ARG = '<item>'
READALL_OPT = '--all'

def err_print(*args, **kwargs):
    """ Same as builtin print but output to stderr. """
    print(*args, file=sys.stderr, **kwargs)

def pacman_msg(*args, **kwargs):
    """ Same as print but include informant preamble so the message is clear in pacman. """
    msg = YELLOW + ':: informant: ' + CLEAR
    for arg in args:
        msg += arg
    print(msg, **kwargs)

def prompt_yes_no(question, default):
    """ Print 'question' to user with (y/n) and 'default' being the
    response for blank input.
    """
    again = 'Unknown response.'
    if default.lower() in ('y', 'yes'):
        options = '(Y/n): '
    elif default.lower() in ('n', 'no'):
        options = '(y/N): '
    else:
        raise ValueError('default must be "y", "yes", "n", or "no"')

    response = input(' '.join((question, options))).lower()
    while response not in ('y', 'yes', 'n', 'no', ''):
        response = input(' '.join((again, question, options))).lower()
    if response == '':
        return default
    return response

def running_from_pacman():
    """ Return True if the parent process is pacman """
    ppid = os.getppid()
    p_name = subprocess.check_output(['ps', '-p', str(ppid), '-o', 'comm='])
    p_name = p_name.decode().rstrip()
    if ARGV.get(DEBUG_OPT):
        err_print('informant: running from: {}'.format(p_name))
    return p_name == 'pacman'


def get_save_name():
    """ Return the name of the file to save read information to. """
    path = ""
    user = os.getenv("SUDO_USER") or os.getenv("USER") 
    if ARGV.get(FILE_OPT):
        path = ARGV.get(FILE_OPT)
    else:
        home = os.path.expanduser('~'+user)
        path = home+'/.cache/informant.dat'

    """ Check if the file doesn't exist, create it with user ownership """
    if not os.path.exists(path):
        with open(path, "w"):
            uid = pwd.getpwnam(user).pw_uid
            gid = grp.getgrnam("users").gr_gid
            os.chown(path, uid, gid)

    return path

def get_datfile(filename):
    """ Return a datfile, which should be a tuple with the first element
    containing the cache, and the second element the list of read items. """
    if ARGV.get(DEBUG_OPT):
        err_print('Getting datfile from "{}"'.format(filename))

    try:
        with open(filename, 'rb') as pickle_file:
            try:
                (cache, readlist) = pickle.load(pickle_file)
                pickle_file.close()
            except (EOFError, ValueError):
                (cache, readlist) = ({"feed": None, "max-age": None, "last-request": None}, [])
    except (FileNotFoundError, PermissionError):
        (cache, readlist) = ({"feed": None, "max-age": None, "last-request": None}, [])
    return (cache, readlist)

def has_been_read(entry):
    """ Check if the given entry has been read and return True or False. """
    if ARGV.get(DEBUG_OPT):
        err_print(READLIST)
    title = entry.title
    date = date_parser.parse(entry.updated)
    if str(date.timestamp()) + '|' + title in READLIST:
        return True
    return False

def save_datfile():
    """ Save the datfile with cache and readlist """
    if ARGV.get(DEBUG_OPT):
        return
    filename = get_save_name()
    datfile_obj = (CACHE, READLIST)
    try:
        # then open as write to save updated list
        with open(filename, 'wb') as pickle_file:
            pickle.dump(datfile_obj, pickle_file)
            pickle_file.close()
    except PermissionError:
        err_print(RED + 'ERROR: ' + CLEAR + 'Unable to save read information, \
please re-run with correct permissions to access "{}".'.format(filename))
        sys.exit(255)

def mark_as_read(entry):
    """ Save the given entry to mark it as read. """
    if has_been_read(entry):
        return
    title = entry.title
    date = date_parser.parse(entry.updated)
    READLIST.append(str(date.timestamp()) + '|' + title)
    save_datfile()

def pretty_print_item(item):
    """ Print out the given feed item, replacing some markup to make it look
    nicer. If the '--raw' option has been provided then the markup will not be
    replaced. """
    title = item.title
    body = item.summary
    timestamp = item.published
    if not ARGV.get(RAW_OPT):
        #if not using raw also bold title
        title = BOLD + title + CLEAR
        h2t = html2text.HTML2Text()
        h2t.inline_links = False
        h2t.body_width = 85
        body = h2t.handle(body)
    print(title + '\n' + timestamp + '\n\n' + body)

def format_list_item(entry, index):
    """ Returns a formatted string with the entry's index number, title, and
    right-aligned timestamp. Unread items are bolded"""
    terminal_width = shutil.get_terminal_size().columns
    wrap_width = terminal_width - len(entry.published) - 1
    heading = str(index) + ': ' + entry.title
    wrapped_heading = textwrap.wrap(heading, wrap_width)
    padding = terminal_width - len(wrapped_heading[0] + entry.published)
    if has_been_read(entry):
        return (
            wrapped_heading[0] +
            ' ' * (padding) +
            entry.published +
            '\n'.join(wrapped_heading[1:])
                )
    else:
        return (
            BOLD +
            wrapped_heading[0] +
            CLEAR +
            ' ' * (padding) +
            entry.published +
            BOLD +
            '\n'.join(wrapped_heading[1:]) +
            CLEAR
        )

def check_cmd(feed):
    """ Run the check command. Check if there are any news items that are
    unread. If there is only one unread item, print it out and mark it as read.
    Also, exit the program with return code matching the unread count. """
    unread = 0
    unread_items = []
    for entry in feed.entries:
        if not has_been_read(entry):
            unread += 1
            unread_items.append(entry)
    if unread == 1:
        if RFP:
            pacman_msg('Stopping upgrade to print news')
        pretty_print_item(unread_items[0])
        mark_as_read(unread_items[0])
        if RFP:
            pacman_msg('You can re-run your pacman command to complete the upgrade')
    elif unread > 1:
        print('There are {:d} unread news items! Use informant to read \
them.'.format(unread))
        if RFP:
            pacman_msg('Run `informant read` before re-running your pacman command')
    sys.exit(unread)

def list_cmd(feed):
    """ Run the list command. Print out a list of recent news item titles. """
    if ARGV.get(REV_OPT):
        feed_list = reversed(feed.entries)
    else:
        feed_list = feed.entries
    index = 0
    for entry in feed_list:
        if not ARGV.get(UNREAD_OPT) \
        or (ARGV.get(UNREAD_OPT) and not has_been_read(entry)):
            print(format_list_item(entry, index))
            index += 1

def read_cmd(feed):
    """ Run the read command. Print news items and mark them as read. """
    if ARGV.get(READALL_OPT):
        for entry in feed.entries:
            mark_as_read(entry)
    else:
        if ARGV[ITEM_ARG]:
            item = ARGV[ITEM_ARG]
            if item.isdigit():
                entry = feed.entries[int(item)]
                pretty_print_item(entry)
                mark_as_read(entry)
            else:
                for entry in feed.entries:
                    if item in entry.title:
                        pretty_print_item(entry)
                        mark_as_read(entry)
                        break
                else:
                    err_print('Could not find "' + item + '" in newsfeed')
                    sys.exit(255)
        else:
            unread_entries = list()
            for entry in feed.entries:
                if not has_been_read(entry):
                    unread_entries.insert(0, entry)
            for entry in unread_entries:
                pretty_print_item(entry)
                mark_as_read(entry)
                if entry is not unread_entries[-1]:
                    read_next = prompt_yes_no('Read next item?', 'yes')
                    if read_next in ('n', 'no'):
                        break
                else:
                    print('No more unread items')

def cache_is_valid():
    """ Returns True if the cache exists and is younger than the max-age header. """
    if ARGV.get(NOCACHE_OPT):
        return False
    if not CACHE['last-request'] \
            or not CACHE['max-age'] \
            or not CACHE['feed']:
        return False
    current_time = float(time.time())
    last_request = float(CACHE['last-request'])
    max_age = float(CACHE['max-age'])
    return bool(current_time - last_request < max_age)

def write_cache(feed):
    """ Writes cache to datfile. """
    if ARGV.get(NOCACHE_OPT):
        return
    CACHE['feed'] = feed
    CACHE['last-request'] = str(time.time())
    feed.headers = dict((k.lower(), v) for k, v in feed.headers.items())
    CACHE['max-age'] = feed.headers['cache-control'].split('=')[1]
    save_datfile()

def run():
    """ The main function.
    Check given arguments get feed and run given command. """
    if ARGV.get(DEBUG_OPT):
        err_print(ARGV)

    if cache_is_valid():
        feed = CACHE['feed']
    else:
        feed = feedparser.parse(ARCH_NEWS)
        if feed.bozo:
            err_print(RED + 'ERROR: ' + CLEAR + 'failed checking feed: {}'.format(feed.bozo_exception))
            if RFP:
                pacman_msg("Exiting so we don't block your pacman upgrade")
                sys.exit(0)
            sys.exit(255)
        write_cache(feed)

    if ARGV.get(CHECK_CMD):
        check_cmd(feed)
    elif ARGV.get(LIST_CMD):
        list_cmd(feed)
    elif ARGV.get(READ_CMD):
        read_cmd(feed)

if __name__ == '__main__':
    ARGV = docopt.docopt(__doc__, version='informant v0.3.2')
    CACHE, READLIST = get_datfile(get_save_name())
    RFP = running_from_pacman()
    run()
    sys.exit()
